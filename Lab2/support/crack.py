import os
import argparse
import base64
import hashlib
import crypt

current_directory = os.path.dirname(os.path.abspath(__file__))

def check_password(password, hashed_password, hash_type):
    if hash_type == 'md5+base64':
        base64_str = base64.b64encode(password.encode()).decode()
        new_hash = hashlib.md5(base64_str.encode()).hexdigest()
    elif hash_type == 'sha512':
        salt = hashed_password.split('$')[2]
        new_hash = crypt.crypt(password, f"$6${salt}")
    else:
        raise ValueError("Invalid hash type specified")

    return new_hash == hashed_password

def find_password(hash_input, wordlist, hash_type):
    passwords = []
    counter = 0
    dir_word_list = os.path.join(current_directory, wordlist)

    with open(dir_word_list, 'r') as f:
        passwords = [password.strip() for password in f.readlines()]  # remove characters \n

    print("Loading words...")
    for password in passwords:
        if check_password(password, hash_input, hash_type):
            print("Password found:", password)
            counter = 1

    if counter == 0:
        print("No passwords were found")

if __name__ == '__main__':
    parser = argparse.ArgumentParser(description='Hash Password Finder')
    parser.add_argument('--hash', type=str, help='Input hash string (enclose in single quotes)')
    parser.add_argument('--wordlist', type=str, help='Word list name')
    parser.add_argument('--hash-type', type=str, choices=['md5+base64', 'sha512'], help='Hash type (md5+base64 or sha512)')
    args = parser.parse_args()
    find_password(args.hash, args.wordlist, args.hash_type)
